/*
 * eLabFTW REST API v2 Documentation
 * This document describes all available endpoints and methods for eLabFTW's API version 2. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.File;
/**
 * ImportBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-01-17T16:14:35.053224103Z[GMT]")

public class ImportBody {
  @JsonProperty("file")
  private File file = null;

  /**
   * The target entity type
   */
  public enum EntityTypeEnum {
    EXPERIMENTS("experiments"),
    ITEMS("items"),
    EXPERIMENTS_TEMPLATES("experiments_templates"),
    ITEMS_TYPES("items_types");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static EntityTypeEnum fromValue(String input) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("entity_type")
  private EntityTypeEnum entityType = null;

  @JsonProperty("category")
  private Integer category = null;

  @JsonProperty("canread")
  private String canread = null;

  @JsonProperty("canwrite")
  private String canwrite = null;

  public ImportBody file(File file) {
    this.file = file;
    return this;
  }

   /**
   * The file to upload.
   * @return file
  **/
  @Schema(required = true, description = "The file to upload.")
  public File getFile() {
    return file;
  }

  public void setFile(File file) {
    this.file = file;
  }

  public ImportBody entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * The target entity type
   * @return entityType
  **/
  @Schema(example = "experiments", required = true, description = "The target entity type")
  public EntityTypeEnum getEntityType() {
    return entityType;
  }

  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }

  public ImportBody category(Integer category) {
    this.category = category;
    return this;
  }

   /**
   * The default category ID if no category is defined for a given entry
   * @return category
  **/
  @Schema(example = "6", description = "The default category ID if no category is defined for a given entry")
  public Integer getCategory() {
    return category;
  }

  public void setCategory(Integer category) {
    this.category = category;
  }

  public ImportBody canread(String canread) {
    this.canread = canread;
    return this;
  }

   /**
   * A JSON string representing read permissions
   * @return canread
  **/
  @Schema(example = "{\"base\": 30, \"teams\": [3], \"teamgroups\": [], \"users\": [91, 32]} ", description = "A JSON string representing read permissions")
  public String getCanread() {
    return canread;
  }

  public void setCanread(String canread) {
    this.canread = canread;
  }

  public ImportBody canwrite(String canwrite) {
    this.canwrite = canwrite;
    return this;
  }

   /**
   * A JSON string representing write permissions
   * @return canwrite
  **/
  @Schema(example = "{\"base\": 30, \"teams\": [3], \"teamgroups\": [], \"users\": [91, 32]} ", description = "A JSON string representing write permissions")
  public String getCanwrite() {
    return canwrite;
  }

  public void setCanwrite(String canwrite) {
    this.canwrite = canwrite;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportBody importBody = (ImportBody) o;
    return Objects.equals(this.file, importBody.file) &&
        Objects.equals(this.entityType, importBody.entityType) &&
        Objects.equals(this.category, importBody.category) &&
        Objects.equals(this.canread, importBody.canread) &&
        Objects.equals(this.canwrite, importBody.canwrite);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Objects.hashCode(file), entityType, category, canread, canwrite);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportBody {\n");
    
    sb.append("    file: ").append(toIndentedString(file)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    canread: ").append(toIndentedString(canread)).append("\n");
    sb.append("    canwrite: ").append(toIndentedString(canwrite)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
