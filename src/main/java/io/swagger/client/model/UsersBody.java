/*
 * eLabFTW REST API v2 Documentation
 * This document describes all available endpoints and methods for eLabFTW's API version 2. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import javax.annotation.processing.Generated;
import java.io.IOException;
/**
 * UsersBody
 */

@Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-11-15T12:02:45.960786319Z[GMT]")

public class UsersBody {
  @SerializedName("firstname")
  private String firstname = null;

  @SerializedName("lastname")
  private String lastname = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("team")
  private Integer team = null;

  @SerializedName("valid_until")
  private String validUntil = null;

  @SerializedName("orgid")
  private String orgid = null;

  /**
   * Which permissions level the user will get? &#x60;1&#x60; is Sysadmin, &#x60;2&#x60; is Admin, &#x60;4&#x60; is user (default)
   */
  @JsonAdapter(UsergroupEnum.Adapter.class)
  public enum UsergroupEnum {
    @SerializedName("1")
    NUMBER_1(1),
    @SerializedName("2")
    NUMBER_2(2),
    @SerializedName("4")
    NUMBER_4(4);

    private Integer value;

    UsergroupEnum(Integer value) {
      this.value = value;
    }
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static UsergroupEnum fromValue(Integer input) {
      for (UsergroupEnum b : UsergroupEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<UsergroupEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UsergroupEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public UsergroupEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextInt();
        return UsergroupEnum.fromValue((Integer)(value));
      }
    }
  }  @SerializedName("usergroup")
  private UsergroupEnum usergroup = null;

  public UsersBody firstname(String firstname) {
    this.firstname = firstname;
    return this;
  }

   /**
   * User&#x27;s first name.
   * @return firstname
  **/
  @Schema(required = true, description = "User's first name.")
  public String getFirstname() {
    return firstname;
  }

  public void setFirstname(String firstname) {
    this.firstname = firstname;
  }

  public UsersBody lastname(String lastname) {
    this.lastname = lastname;
    return this;
  }

   /**
   * User&#x27;s last name.
   * @return lastname
  **/
  @Schema(required = true, description = "User's last name.")
  public String getLastname() {
    return lastname;
  }

  public void setLastname(String lastname) {
    this.lastname = lastname;
  }

  public UsersBody email(String email) {
    this.email = email;
    return this;
  }

   /**
   * User&#x27;s email address.
   * @return email
  **/
  @Schema(required = true, description = "User's email address.")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public UsersBody team(Integer team) {
    this.team = team;
    return this;
  }

   /**
   * The team id.
   * @return team
  **/
  @Schema(description = "The team id.")
  public Integer getTeam() {
    return team;
  }

  public void setTeam(Integer team) {
    this.team = team;
  }

  public UsersBody validUntil(String validUntil) {
    this.validUntil = validUntil;
    return this;
  }

   /**
   * Date in the YYYY-MM-DD format for account expiration date.
   * @return validUntil
  **/
  @Schema(description = "Date in the YYYY-MM-DD format for account expiration date.")
  public String getValidUntil() {
    return validUntil;
  }

  public void setValidUntil(String validUntil) {
    this.validUntil = validUntil;
  }

  public UsersBody orgid(String orgid) {
    this.orgid = orgid;
    return this;
  }

   /**
   * Internal id.
   * @return orgid
  **/
  @Schema(description = "Internal id.")
  public String getOrgid() {
    return orgid;
  }

  public void setOrgid(String orgid) {
    this.orgid = orgid;
  }

  public UsersBody usergroup(UsergroupEnum usergroup) {
    this.usergroup = usergroup;
    return this;
  }

   /**
   * Which permissions level the user will get? &#x60;1&#x60; is Sysadmin, &#x60;2&#x60; is Admin, &#x60;4&#x60; is user (default)
   * @return usergroup
  **/
  @Schema(description = "Which permissions level the user will get? `1` is Sysadmin, `2` is Admin, `4` is user (default)")
  public UsergroupEnum getUsergroup() {
    return usergroup;
  }

  public void setUsergroup(UsergroupEnum usergroup) {
    this.usergroup = usergroup;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsersBody usersBody = (UsersBody) o;
    return Objects.equals(this.firstname, usersBody.firstname) &&
        Objects.equals(this.lastname, usersBody.lastname) &&
        Objects.equals(this.email, usersBody.email) &&
        Objects.equals(this.team, usersBody.team) &&
        Objects.equals(this.validUntil, usersBody.validUntil) &&
        Objects.equals(this.orgid, usersBody.orgid) &&
        Objects.equals(this.usergroup, usersBody.usergroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstname, lastname, email, team, validUntil, orgid, usergroup);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsersBody {\n");
    
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    validUntil: ").append(toIndentedString(validUntil)).append("\n");
    sb.append("    orgid: ").append(toIndentedString(orgid)).append("\n");
    sb.append("    usergroup: ").append(toIndentedString(usergroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
