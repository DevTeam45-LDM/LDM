/*
 * eLabFTW REST API v2 Documentation
 * This document describes all available endpoints and methods for eLabFTW's API version 2. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Info
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-01-17T16:14:35.053224103Z[GMT]")
public class Info {
  @JsonProperty("elabftw_version")
  private String elabftwVersion = null;

  @JsonProperty("elabftw_version_int")
  private Integer elabftwVersionInt = null;

  @JsonProperty("ts_balance")
  private Integer tsBalance = null;

  @JsonProperty("ts_limit")
  private Integer tsLimit = null;

  @JsonProperty("all_users_count")
  private Integer allUsersCount = null;

  @JsonProperty("active_users_count")
  private Integer activeUsersCount = null;

  @JsonProperty("items_count")
  private Integer itemsCount = null;

  @JsonProperty("teams_count")
  private Integer teamsCount = null;

  @JsonProperty("experiments_count")
  private Integer experimentsCount = null;

  @JsonProperty("experiments_timestamped_count")
  private Integer experimentsTimestampedCount = null;

  @JsonProperty("uploads_filesize_sum")
  private Integer uploadsFilesizeSum = null;

  @JsonProperty("uploads_filesize_sum_formatted")
  private String uploadsFilesizeSumFormatted = null;

  @JsonProperty("entities_timestamped_count_last_30_days")
  private Integer entitiesTimestampedCountLast30Days = null;

  public Info elabftwVersion(String elabftwVersion) {
    this.elabftwVersion = elabftwVersion;
    return this;
  }

   /**
   * Current eLabFTW version
   * @return elabftwVersion
  **/
  @Schema(example = "4.8.0", description = "Current eLabFTW version")
  public String getElabftwVersion() {
    return elabftwVersion;
  }

  public void setElabftwVersion(String elabftwVersion) {
    this.elabftwVersion = elabftwVersion;
  }

  public Info elabftwVersionInt(Integer elabftwVersionInt) {
    this.elabftwVersionInt = elabftwVersionInt;
    return this;
  }

   /**
   * Current eLabFTW version as an integer
   * @return elabftwVersionInt
  **/
  @Schema(example = "50102", description = "Current eLabFTW version as an integer")
  public Integer getElabftwVersionInt() {
    return elabftwVersionInt;
  }

  public void setElabftwVersionInt(Integer elabftwVersionInt) {
    this.elabftwVersionInt = elabftwVersionInt;
  }

  public Info tsBalance(Integer tsBalance) {
    this.tsBalance = tsBalance;
    return this;
  }

   /**
   * Number of timestamp tokens left
   * @return tsBalance
  **/
  @Schema(example = "461", description = "Number of timestamp tokens left")
  public Integer getTsBalance() {
    return tsBalance;
  }

  public void setTsBalance(Integer tsBalance) {
    this.tsBalance = tsBalance;
  }

  public Info tsLimit(Integer tsLimit) {
    this.tsLimit = tsLimit;
    return this;
  }

  /**
   * Number of timestamp tokens left
   * @return tsBalance
   **/
  @Schema(example = "461", description = "Number of timestamp tokens left")
  public Integer getTsLimit() {
    return tsLimit;
  }

  public void setTsLimit(Integer tsLimit) {
    this.tsLimit = tsLimit;
  }

  public Info allUsersCount(Integer allUsersCount) {
    this.allUsersCount = allUsersCount;
    return this;
  }

   /**
   * Total count of all users
   * @return allUsersCount
  **/
  @Schema(example = "389", description = "Total count of all users")
  public Integer getAllUsersCount() {
    return allUsersCount;
  }

  public void setAllUsersCount(Integer allUsersCount) {
    this.allUsersCount = allUsersCount;
  }

  public Info activeUsersCount(Integer activeUsersCount) {
    this.activeUsersCount = activeUsersCount;
    return this;
  }

   /**
   * Total count of active users
   * @return activeUsersCount
  **/
  @Schema(example = "311", description = "Total count of active users")
  public Integer getActiveUsersCount() {
    return activeUsersCount;
  }

  public void setActiveUsersCount(Integer activeUsersCount) {
    this.activeUsersCount = activeUsersCount;
  }

  public Info itemsCount(Integer itemsCount) {
    this.itemsCount = itemsCount;
    return this;
  }

   /**
   * Total count of items
   * @return itemsCount
  **/
  @Schema(example = "666", description = "Total count of items")
  public Integer getItemsCount() {
    return itemsCount;
  }

  public void setItemsCount(Integer itemsCount) {
    this.itemsCount = itemsCount;
  }

  public Info teamsCount(Integer teamsCount) {
    this.teamsCount = teamsCount;
    return this;
  }

   /**
   * Total count of teams
   * @return teamsCount
  **/
  @Schema(example = "18", description = "Total count of teams")
  public Integer getTeamsCount() {
    return teamsCount;
  }

  public void setTeamsCount(Integer teamsCount) {
    this.teamsCount = teamsCount;
  }

  public Info experimentsCount(Integer experimentsCount) {
    this.experimentsCount = experimentsCount;
    return this;
  }

   /**
   * Total count of experiments
   * @return experimentsCount
  **/
  @Schema(example = "10189", description = "Total count of experiments")
  public Integer getExperimentsCount() {
    return experimentsCount;
  }

  public void setExperimentsCount(Integer experimentsCount) {
    this.experimentsCount = experimentsCount;
  }

  public Info experimentsTimestampedCount(Integer experimentsTimestampedCount) {
    this.experimentsTimestampedCount = experimentsTimestampedCount;
    return this;
  }

   /**
   * Total count of experiments with timestamps
   * @return experimentsTimestampedCount
  **/
  @Schema(example = "1601", description = "Total count of experiments with timestamps")
  public Integer getExperimentsTimestampedCount() {
    return experimentsTimestampedCount;
  }

  public void setExperimentsTimestampedCount(Integer experimentsTimestampedCount) {
    this.experimentsTimestampedCount = experimentsTimestampedCount;
  }

  public Info uploadsFilesizeSum(Integer uploadsFilesizeSum) {
    this.uploadsFilesizeSum = uploadsFilesizeSum;
    return this;
  }

   /**
   * Sum of stored filesize in MySQL for all uploads of the instance.
   * @return uploadsFilesizeSum
  **/
  @Schema(example = "25681672", description = "Sum of stored filesize in MySQL for all uploads of the instance.")
  public Integer getUploadsFilesizeSum() {
    return uploadsFilesizeSum;
  }

  public void setUploadsFilesizeSum(Integer uploadsFilesizeSum) {
    this.uploadsFilesizeSum = uploadsFilesizeSum;
  }

  public Info uploadsFilesizeSumFormatted(String uploadsFilesizeSumFormatted) {
    this.uploadsFilesizeSumFormatted = uploadsFilesizeSumFormatted;
    return this;
  }

   /**
   * Sum of stored filesize in MySQL for all uploads of the instance, formatted
   * @return uploadsFilesizeSumFormatted
  **/
  @Schema(example = "24.49 MiB", description = "Sum of stored filesize in MySQL for all uploads of the instance, formatted")
  public String getUploadsFilesizeSumFormatted() {
    return uploadsFilesizeSumFormatted;
  }

  public void setUploadsFilesizeSumFormatted(String uploadsFilesizeSumFormatted) {
    this.uploadsFilesizeSumFormatted = uploadsFilesizeSumFormatted;
  }

  public Integer getEntitiesTimestampedCountLast30Days() {
    return entitiesTimestampedCountLast30Days;
  }

  public void setEntitiesTimestampedCountLast30Days(Integer entitiesTimestampedCountLast30Days) {
    this.entitiesTimestampedCountLast30Days = entitiesTimestampedCountLast30Days;
  }

  public Info entitiesTimestampedCountLast30Days(Integer entitiesTimestampedCountLast30Days) {
    this.entitiesTimestampedCountLast30Days = entitiesTimestampedCountLast30Days;
    return this;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Info info = (Info) o;
    return Objects.equals(this.elabftwVersion, info.elabftwVersion) &&
        Objects.equals(this.elabftwVersionInt, info.elabftwVersionInt) &&
        Objects.equals(this.tsBalance, info.tsBalance) &&
        Objects.equals(this.tsLimit, info.tsLimit) &&
        Objects.equals(this.allUsersCount, info.allUsersCount) &&
        Objects.equals(this.activeUsersCount, info.activeUsersCount) &&
        Objects.equals(this.itemsCount, info.itemsCount) &&
        Objects.equals(this.teamsCount, info.teamsCount) &&
        Objects.equals(this.experimentsCount, info.experimentsCount) &&
        Objects.equals(this.experimentsTimestampedCount, info.experimentsTimestampedCount) &&
        Objects.equals(this.uploadsFilesizeSum, info.uploadsFilesizeSum) &&
        Objects.equals(this.uploadsFilesizeSumFormatted, info.uploadsFilesizeSumFormatted) &&
        Objects.equals(this.entitiesTimestampedCountLast30Days, info.entitiesTimestampedCountLast30Days);
  }

  @Override
  public int hashCode() {
    return Objects.hash(elabftwVersion, elabftwVersionInt, tsBalance, tsLimit, allUsersCount, activeUsersCount, itemsCount, teamsCount, experimentsCount, experimentsTimestampedCount, uploadsFilesizeSum, uploadsFilesizeSumFormatted, entitiesTimestampedCountLast30Days);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse200 {\n");
    
    sb.append("    elabftwVersion: ").append(toIndentedString(elabftwVersion)).append("\n");
    sb.append("    elabftwVersionInt: ").append(toIndentedString(elabftwVersionInt)).append("\n");
    sb.append("    tsBalance: ").append(toIndentedString(tsBalance)).append("\n");
    sb.append("    tsLimit: ").append(toIndentedString(tsLimit)).append("\n");
    sb.append("    allUsersCount: ").append(toIndentedString(allUsersCount)).append("\n");
    sb.append("    activeUsersCount: ").append(toIndentedString(activeUsersCount)).append("\n");
    sb.append("    itemsCount: ").append(toIndentedString(itemsCount)).append("\n");
    sb.append("    teamsCount: ").append(toIndentedString(teamsCount)).append("\n");
    sb.append("    experimentsCount: ").append(toIndentedString(experimentsCount)).append("\n");
    sb.append("    experimentsTimestampedCount: ").append(toIndentedString(experimentsTimestampedCount)).append("\n");
    sb.append("    uploadsFilesizeSum: ").append(toIndentedString(uploadsFilesizeSum)).append("\n");
    sb.append("    uploadsFilesizeSumFormatted: ").append(toIndentedString(uploadsFilesizeSumFormatted)).append("\n");
    sb.append("    entitiesTimestampedCountLast30Days: ").append(toIndentedString(entitiesTimestampedCountLast30Days)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
