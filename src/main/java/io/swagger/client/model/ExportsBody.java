/*
 * eLabFTW REST API v2 Documentation
 * This document describes all available endpoints and methods for eLabFTW's API version 2. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import javax.annotation.processing.Generated;
import java.io.IOException;
/**
 * ExportsBody
 */

@Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-11-15T12:02:45.960786319Z[GMT]")

public class ExportsBody {
  /**
   * File format for the export
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    @SerializedName("csv")
    CSV("csv"),
    @SerializedName("eln")
    ELN("eln"),
    @SerializedName("json")
    JSON("json"),
    @SerializedName("pdf")
    PDF("pdf"),
    @SerializedName("zip")
    ZIP("zip");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FormatEnum fromValue(String input) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FormatEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("format")
  private FormatEnum format = null;

  @SerializedName("experiments")
  private String experiments = null;

  @SerializedName("items")
  private String items = null;

  @SerializedName("experiments_templates")
  private String experimentsTemplates = null;

  @SerializedName("items_types")
  private String itemsTypes = null;

  @SerializedName("changelog")
  private String changelog = null;

  @SerializedName("json")
  private String json = null;

  @SerializedName("pdfa")
  private String pdfa = null;

  public ExportsBody format(FormatEnum format) {
    this.format = format;
    return this;
  }

   /**
   * File format for the export
   * @return format
  **/
  @Schema(example = "pdf", required = true, description = "File format for the export")
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }

  public ExportsBody experiments(String experiments) {
    this.experiments = experiments;
    return this;
  }

   /**
   * Set to \&quot;on\&quot; to include experiments in the export
   * @return experiments
  **/
  @Schema(example = "on", description = "Set to \"on\" to include experiments in the export")
  public String getExperiments() {
    return experiments;
  }

  public void setExperiments(String experiments) {
    this.experiments = experiments;
  }

  public ExportsBody items(String items) {
    this.items = items;
    return this;
  }

   /**
   * Set to \&quot;on\&quot; to include resources in the export
   * @return items
  **/
  @Schema(example = "on", description = "Set to \"on\" to include resources in the export")
  public String getItems() {
    return items;
  }

  public void setItems(String items) {
    this.items = items;
  }

  public ExportsBody experimentsTemplates(String experimentsTemplates) {
    this.experimentsTemplates = experimentsTemplates;
    return this;
  }

   /**
   * Set to \&quot;on\&quot; to include experiments templates in the export
   * @return experimentsTemplates
  **/
  @Schema(example = "on", description = "Set to \"on\" to include experiments templates in the export")
  public String getExperimentsTemplates() {
    return experimentsTemplates;
  }

  public void setExperimentsTemplates(String experimentsTemplates) {
    this.experimentsTemplates = experimentsTemplates;
  }

  public ExportsBody itemsTypes(String itemsTypes) {
    this.itemsTypes = itemsTypes;
    return this;
  }

   /**
   * Set to \&quot;on\&quot; to include resources categories in the export
   * @return itemsTypes
  **/
  @Schema(example = "on", description = "Set to \"on\" to include resources categories in the export")
  public String getItemsTypes() {
    return itemsTypes;
  }

  public void setItemsTypes(String itemsTypes) {
    this.itemsTypes = itemsTypes;
  }

  public ExportsBody changelog(String changelog) {
    this.changelog = changelog;
    return this;
  }

   /**
   * Set to \&quot;on\&quot; to include the changelog in PDF files
   * @return changelog
  **/
  @Schema(example = "on", description = "Set to \"on\" to include the changelog in PDF files")
  public String getChangelog() {
    return changelog;
  }

  public void setChangelog(String changelog) {
    this.changelog = changelog;
  }

  public ExportsBody json(String json) {
    this.json = json;
    return this;
  }

   /**
   * Set to \&quot;on\&quot; to include a full JSON export in the ZIP archives
   * @return json
  **/
  @Schema(example = "on", description = "Set to \"on\" to include a full JSON export in the ZIP archives")
  public String getJson() {
    return json;
  }

  public void setJson(String json) {
    this.json = json;
  }

  public ExportsBody pdfa(String pdfa) {
    this.pdfa = pdfa;
    return this;
  }

   /**
   * Set to \&quot;on\&quot; to create PDF files with the PDF/A specification
   * @return pdfa
  **/
  @Schema(example = "on", description = "Set to \"on\" to create PDF files with the PDF/A specification")
  public String getPdfa() {
    return pdfa;
  }

  public void setPdfa(String pdfa) {
    this.pdfa = pdfa;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportsBody exportsBody = (ExportsBody) o;
    return Objects.equals(this.format, exportsBody.format) &&
        Objects.equals(this.experiments, exportsBody.experiments) &&
        Objects.equals(this.items, exportsBody.items) &&
        Objects.equals(this.experimentsTemplates, exportsBody.experimentsTemplates) &&
        Objects.equals(this.itemsTypes, exportsBody.itemsTypes) &&
        Objects.equals(this.changelog, exportsBody.changelog) &&
        Objects.equals(this.json, exportsBody.json) &&
        Objects.equals(this.pdfa, exportsBody.pdfa);
  }

  @Override
  public int hashCode() {
    return Objects.hash(format, experiments, items, experimentsTemplates, itemsTypes, changelog, json, pdfa);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportsBody {\n");
    
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    experiments: ").append(toIndentedString(experiments)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    experimentsTemplates: ").append(toIndentedString(experimentsTemplates)).append("\n");
    sb.append("    itemsTypes: ").append(toIndentedString(itemsTypes)).append("\n");
    sb.append("    changelog: ").append(toIndentedString(changelog)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    pdfa: ").append(toIndentedString(pdfa)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
