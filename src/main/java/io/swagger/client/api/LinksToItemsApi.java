/*
 * eLabFTW REST API v2 Documentation
 * This document describes all available endpoints and methods for eLabFTW's API version 2. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ItemsLinksSubidBody;
import io.swagger.client.model.Link;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LinksToItemsApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public LinksToItemsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LinksToItemsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for deleteEntitiyItemsLink
     * @param entityType Entity type (required)
     * @param id ID of the entity (required)
     * @param subid ID of the item (link) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEntitiyItemsLinkCall(String entityType, Integer id, Integer subid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/{entity_type}/{id}/items_links/{subid}"
            .replaceAll("\\{" + "entity_type" + "\\}", apiClient.escapeString(entityType.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "subid" + "\\}", apiClient.escapeString(subid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEntitiyItemsLinkValidateBeforeCall(String entityType, Integer id, Integer subid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling deleteEntitiyItemsLink(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteEntitiyItemsLink(Async)");
        }
        // verify the required parameter 'subid' is set
        if (subid == null) {
            throw new ApiException("Missing the required parameter 'subid' when calling deleteEntitiyItemsLink(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteEntitiyItemsLinkCall(entityType, id, subid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an item link.
     * The link gets deleted.
     * @param entityType Entity type (required)
     * @param id ID of the entity (required)
     * @param subid ID of the item (link) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteEntitiyItemsLink(String entityType, Integer id, Integer subid) throws ApiException {
        deleteEntitiyItemsLinkWithHttpInfo(entityType, id, subid);
    }

    /**
     * Delete an item link.
     * The link gets deleted.
     * @param entityType Entity type (required)
     * @param id ID of the entity (required)
     * @param subid ID of the item (link) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteEntitiyItemsLinkWithHttpInfo(String entityType, Integer id, Integer subid) throws ApiException {
        com.squareup.okhttp.Call call = deleteEntitiyItemsLinkValidateBeforeCall(entityType, id, subid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an item link. (asynchronously)
     * The link gets deleted.
     * @param entityType Entity type (required)
     * @param id ID of the entity (required)
     * @param subid ID of the item (link) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEntitiyItemsLinkAsync(String entityType, Integer id, Integer subid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEntitiyItemsLinkValidateBeforeCall(entityType, id, subid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postEntityItemsLinks
     * @param entityType Entity type (required)
     * @param id ID of the entity (required)
     * @param subid ID of the item (link) (required)
     * @param body Parameters for creating or importing a link. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postEntityItemsLinksCall(String entityType, Integer id, Integer subid, ItemsLinksSubidBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/{entity_type}/{id}/items_links/{subid}"
            .replaceAll("\\{" + "entity_type" + "\\}", apiClient.escapeString(entityType.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "subid" + "\\}", apiClient.escapeString(subid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postEntityItemsLinksValidateBeforeCall(String entityType, Integer id, Integer subid, ItemsLinksSubidBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling postEntityItemsLinks(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postEntityItemsLinks(Async)");
        }
        // verify the required parameter 'subid' is set
        if (subid == null) {
            throw new ApiException("Missing the required parameter 'subid' when calling postEntityItemsLinks(Async)");
        }
        
        com.squareup.okhttp.Call call = postEntityItemsLinksCall(entityType, id, subid, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create or import a link.
     * 
     * @param entityType Entity type (required)
     * @param id ID of the entity (required)
     * @param subid ID of the item (link) (required)
     * @param body Parameters for creating or importing a link. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postEntityItemsLinks(String entityType, Integer id, Integer subid, ItemsLinksSubidBody body) throws ApiException {
        postEntityItemsLinksWithHttpInfo(entityType, id, subid, body);
    }

    /**
     * Create or import a link.
     * 
     * @param entityType Entity type (required)
     * @param id ID of the entity (required)
     * @param subid ID of the item (link) (required)
     * @param body Parameters for creating or importing a link. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postEntityItemsLinksWithHttpInfo(String entityType, Integer id, Integer subid, ItemsLinksSubidBody body) throws ApiException {
        com.squareup.okhttp.Call call = postEntityItemsLinksValidateBeforeCall(entityType, id, subid, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create or import a link. (asynchronously)
     * 
     * @param entityType Entity type (required)
     * @param id ID of the entity (required)
     * @param subid ID of the item (link) (required)
     * @param body Parameters for creating or importing a link. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postEntityItemsLinksAsync(String entityType, Integer id, Integer subid, ItemsLinksSubidBody body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postEntityItemsLinksValidateBeforeCall(entityType, id, subid, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for readEntityItemsLinks
     * @param entityType Entity type (required)
     * @param id ID of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readEntityItemsLinksCall(String entityType, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/{entity_type}/{id}/items_links"
            .replaceAll("\\{" + "entity_type" + "\\}", apiClient.escapeString(entityType.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readEntityItemsLinksValidateBeforeCall(String entityType, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling readEntityItemsLinks(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling readEntityItemsLinks(Async)");
        }
        
        com.squareup.okhttp.Call call = readEntityItemsLinksCall(entityType, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read all items links of that entity.
     * 
     * @param entityType Entity type (required)
     * @param id ID of the entity (required)
     * @return List&lt;Link&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Link> readEntityItemsLinks(String entityType, Integer id) throws ApiException {
        ApiResponse<List<Link>> resp = readEntityItemsLinksWithHttpInfo(entityType, id);
        return resp.getData();
    }

    /**
     * Read all items links of that entity.
     * 
     * @param entityType Entity type (required)
     * @param id ID of the entity (required)
     * @return ApiResponse&lt;List&lt;Link&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Link>> readEntityItemsLinksWithHttpInfo(String entityType, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = readEntityItemsLinksValidateBeforeCall(entityType, id, null, null);
        Type localVarReturnType = new TypeToken<List<Link>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read all items links of that entity. (asynchronously)
     * 
     * @param entityType Entity type (required)
     * @param id ID of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readEntityItemsLinksAsync(String entityType, Integer id, final ApiCallback<List<Link>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readEntityItemsLinksValidateBeforeCall(entityType, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Link>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
