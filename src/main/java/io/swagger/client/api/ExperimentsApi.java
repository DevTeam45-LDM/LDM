/*
 * eLabFTW REST API v2 Documentation
 * This document describes all available endpoints and methods for eLabFTW's API version 2. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Experiment;
import io.swagger.client.model.ExperimentsBody;
import io.swagger.client.model.ExperimentsIdBody;
import io.swagger.client.model.ExperimentsIdBody1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExperimentsApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public ExperimentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExperimentsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for deleteExperiment
     * @param id ID of the experiment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteExperimentCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/experiments/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteExperimentValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteExperiment(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteExperimentCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an experiment.
     * The experiment gets soft-deleted.
     * @param id ID of the experiment (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteExperiment(Integer id) throws ApiException {
        deleteExperimentWithHttpInfo(id);
    }

    /**
     * Delete an experiment.
     * The experiment gets soft-deleted.
     * @param id ID of the experiment (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteExperimentWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = deleteExperimentValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an experiment. (asynchronously)
     * The experiment gets soft-deleted.
     * @param id ID of the experiment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteExperimentAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteExperimentValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getExperiment
     * @param id ID of the experiment (required)
     * @param format Get the entity in a different format like csv, pdf, eln or zip. \&quot;pdfa\&quot; means archive pdf (PDF/A), same with \&quot;zipa\&quot;.  (optional, default to json)
     * @param json Include a full JSON export in the ZIP archive. Only applicable if format is zip(a).  (optional, default to false)
     * @param withTitle Include the title in the QR code. Only applicable if format is qrpng.  (optional, default to true)
     * @param size Specify the size of the QR code in pixels. Only applicable if format is qrpng.  (optional, default to 250)
     * @param changelog Toggles if the changelog should be included in PDF exports (pdf, pdfa, zip, zipa). Changelog is by default included if the export provides PDF/A, otherwise not.  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExperimentCall(Integer id, String format, Boolean json, Boolean withTitle, Integer size, Boolean changelog, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/experiments/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));
        if (json != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("json", json));
        if (withTitle != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("withTitle", withTitle));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (changelog != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("changelog", changelog));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExperimentValidateBeforeCall(Integer id, String format, Boolean json, Boolean withTitle, Integer size, Boolean changelog, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getExperiment(Async)");
        }
        
        com.squareup.okhttp.Call call = getExperimentCall(id, format, json, withTitle, size, changelog, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read an experiment
     * 
     * @param id ID of the experiment (required)
     * @param format Get the entity in a different format like csv, pdf, eln or zip. \&quot;pdfa\&quot; means archive pdf (PDF/A), same with \&quot;zipa\&quot;.  (optional, default to json)
     * @param json Include a full JSON export in the ZIP archive. Only applicable if format is zip(a).  (optional, default to false)
     * @param withTitle Include the title in the QR code. Only applicable if format is qrpng.  (optional, default to true)
     * @param size Specify the size of the QR code in pixels. Only applicable if format is qrpng.  (optional, default to 250)
     * @param changelog Toggles if the changelog should be included in PDF exports (pdf, pdfa, zip, zipa). Changelog is by default included if the export provides PDF/A, otherwise not.  (optional, default to false)
     * @return Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Experiment getExperiment(Integer id, String format, Boolean json, Boolean withTitle, Integer size, Boolean changelog) throws ApiException {
        ApiResponse<Experiment> resp = getExperimentWithHttpInfo(id, format, json, withTitle, size, changelog);
        return resp.getData();
    }

    /**
     * Read an experiment
     * 
     * @param id ID of the experiment (required)
     * @param format Get the entity in a different format like csv, pdf, eln or zip. \&quot;pdfa\&quot; means archive pdf (PDF/A), same with \&quot;zipa\&quot;.  (optional, default to json)
     * @param json Include a full JSON export in the ZIP archive. Only applicable if format is zip(a).  (optional, default to false)
     * @param withTitle Include the title in the QR code. Only applicable if format is qrpng.  (optional, default to true)
     * @param size Specify the size of the QR code in pixels. Only applicable if format is qrpng.  (optional, default to 250)
     * @param changelog Toggles if the changelog should be included in PDF exports (pdf, pdfa, zip, zipa). Changelog is by default included if the export provides PDF/A, otherwise not.  (optional, default to false)
     * @return ApiResponse&lt;Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Experiment> getExperimentWithHttpInfo(Integer id, String format, Boolean json, Boolean withTitle, Integer size, Boolean changelog) throws ApiException {
        com.squareup.okhttp.Call call = getExperimentValidateBeforeCall(id, format, json, withTitle, size, changelog, null, null);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read an experiment (asynchronously)
     * 
     * @param id ID of the experiment (required)
     * @param format Get the entity in a different format like csv, pdf, eln or zip. \&quot;pdfa\&quot; means archive pdf (PDF/A), same with \&quot;zipa\&quot;.  (optional, default to json)
     * @param json Include a full JSON export in the ZIP archive. Only applicable if format is zip(a).  (optional, default to false)
     * @param withTitle Include the title in the QR code. Only applicable if format is qrpng.  (optional, default to true)
     * @param size Specify the size of the QR code in pixels. Only applicable if format is qrpng.  (optional, default to 250)
     * @param changelog Toggles if the changelog should be included in PDF exports (pdf, pdfa, zip, zipa). Changelog is by default included if the export provides PDF/A, otherwise not.  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExperimentAsync(Integer id, String format, Boolean json, Boolean withTitle, Integer size, Boolean changelog, final ApiCallback<Experiment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExperimentValidateBeforeCall(id, format, json, withTitle, size, changelog, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchExperiment
     * @param id ID of the experiment (required)
     * @param body Parameters for patching an item (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchExperimentCall(Integer id, ExperimentsIdBody1 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/experiments/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchExperimentValidateBeforeCall(Integer id, ExperimentsIdBody1 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling patchExperiment(Async)");
        }
        
        com.squareup.okhttp.Call call = patchExperimentCall(id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Modify an experiment
     * 
     * @param id ID of the experiment (required)
     * @param body Parameters for patching an item (optional)
     * @return Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Experiment patchExperiment(Integer id, ExperimentsIdBody1 body) throws ApiException {
        ApiResponse<Experiment> resp = patchExperimentWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * Modify an experiment
     * 
     * @param id ID of the experiment (required)
     * @param body Parameters for patching an item (optional)
     * @return ApiResponse&lt;Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Experiment> patchExperimentWithHttpInfo(Integer id, ExperimentsIdBody1 body) throws ApiException {
        com.squareup.okhttp.Call call = patchExperimentValidateBeforeCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Modify an experiment (asynchronously)
     * 
     * @param id ID of the experiment (required)
     * @param body Parameters for patching an item (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchExperimentAsync(Integer id, ExperimentsIdBody1 body, final ApiCallback<Experiment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchExperimentValidateBeforeCall(id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postExperiment
     * @param body Parameters for creating an experiment (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postExperimentCall(ExperimentsBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/experiments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postExperimentValidateBeforeCall(ExperimentsBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = postExperimentCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an experiment
     * 
     * @param body Parameters for creating an experiment (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postExperiment(ExperimentsBody body) throws ApiException {
        postExperimentWithHttpInfo(body);
    }

    /**
     * Create an experiment
     * 
     * @param body Parameters for creating an experiment (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postExperimentWithHttpInfo(ExperimentsBody body) throws ApiException {
        com.squareup.okhttp.Call call = postExperimentValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create an experiment (asynchronously)
     * 
     * @param body Parameters for creating an experiment (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postExperimentAsync(ExperimentsBody body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postExperimentValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postExperimentById
     * @param id The unique identifier of the experiment to duplicate. (required)
     * @param body Parameters for duplicating an experiment (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postExperimentByIdCall(Integer id, ExperimentsIdBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/experiments/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postExperimentByIdValidateBeforeCall(Integer id, ExperimentsIdBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postExperimentById(Async)");
        }
        
        com.squareup.okhttp.Call call = postExperimentByIdCall(id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Duplicate an experiment with its ID
     * 
     * @param id The unique identifier of the experiment to duplicate. (required)
     * @param body Parameters for duplicating an experiment (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postExperimentById(Integer id, ExperimentsIdBody body) throws ApiException {
        postExperimentByIdWithHttpInfo(id, body);
    }

    /**
     * Duplicate an experiment with its ID
     * 
     * @param id The unique identifier of the experiment to duplicate. (required)
     * @param body Parameters for duplicating an experiment (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postExperimentByIdWithHttpInfo(Integer id, ExperimentsIdBody body) throws ApiException {
        com.squareup.okhttp.Call call = postExperimentByIdValidateBeforeCall(id, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Duplicate an experiment with its ID (asynchronously)
     * 
     * @param id The unique identifier of the experiment to duplicate. (required)
     * @param body Parameters for duplicating an experiment (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postExperimentByIdAsync(Integer id, ExperimentsIdBody body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postExperimentByIdValidateBeforeCall(id, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for readExperiments
     * @param q Search for a term in title, body or elabid.  (optional)
     * @param extended Extended search (advanced query).  (optional)
     * @param related Look only for entries linked to this item id.  (optional)
     * @param relatedOrigin When using the \&quot;related\&quot; query parameter, select the type of the related ID (experiments or items)  (optional)
     * @param cat The status id of the experiments.  (optional)
     * @param tags An array of tags for filtering results containing all of these tags.  (optional)
     * @param limit Limit the number of results.  (optional, default to 15)
     * @param offset Skip a number of results. Use with limit to work the pagination.  (optional, default to 0)
     * @param owner Filter results by author (user id)  (optional)
     * @param scope Set the scope for the results. 1: self, 2: team, 3: everything. It defaults to the user value stored in preferences.  (optional)
     * @param order Change the ordering of the results.  (optional)
     * @param sort Change the sorting of results: ascending or descending.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readExperimentsCall(String q, String extended, Integer related, String relatedOrigin, Integer cat, List<String> tags, Integer limit, Integer offset, Integer owner, Integer scope, String order, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/experiments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (extended != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extended", extended));
        if (related != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("related", related));
        if (relatedOrigin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("related_origin", relatedOrigin));
        if (cat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cat", cat));
        if (tags != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (owner != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("owner", owner));
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readExperimentsValidateBeforeCall(String q, String extended, Integer related, String relatedOrigin, Integer cat, List<String> tags, Integer limit, Integer offset, Integer owner, Integer scope, String order, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = readExperimentsCall(q, extended, related, relatedOrigin, cat, tags, limit, offset, owner, scope, order, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read all experiments that are accessible
     * 
     * @param q Search for a term in title, body or elabid.  (optional)
     * @param extended Extended search (advanced query).  (optional)
     * @param related Look only for entries linked to this item id.  (optional)
     * @param relatedOrigin When using the \&quot;related\&quot; query parameter, select the type of the related ID (experiments or items)  (optional)
     * @param cat The status id of the experiments.  (optional)
     * @param tags An array of tags for filtering results containing all of these tags.  (optional)
     * @param limit Limit the number of results.  (optional, default to 15)
     * @param offset Skip a number of results. Use with limit to work the pagination.  (optional, default to 0)
     * @param owner Filter results by author (user id)  (optional)
     * @param scope Set the scope for the results. 1: self, 2: team, 3: everything. It defaults to the user value stored in preferences.  (optional)
     * @param order Change the ordering of the results.  (optional)
     * @param sort Change the sorting of results: ascending or descending.  (optional)
     * @return List&lt;Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Experiment> readExperiments(String q, String extended, Integer related, String relatedOrigin, Integer cat, List<String> tags, Integer limit, Integer offset, Integer owner, Integer scope, String order, String sort) throws ApiException {
        ApiResponse<List<Experiment>> resp = readExperimentsWithHttpInfo(q, extended, related, relatedOrigin, cat, tags, limit, offset, owner, scope, order, sort);
        return resp.getData();
    }

    /**
     * Read all experiments that are accessible
     * 
     * @param q Search for a term in title, body or elabid.  (optional)
     * @param extended Extended search (advanced query).  (optional)
     * @param related Look only for entries linked to this item id.  (optional)
     * @param relatedOrigin When using the \&quot;related\&quot; query parameter, select the type of the related ID (experiments or items)  (optional)
     * @param cat The status id of the experiments.  (optional)
     * @param tags An array of tags for filtering results containing all of these tags.  (optional)
     * @param limit Limit the number of results.  (optional, default to 15)
     * @param offset Skip a number of results. Use with limit to work the pagination.  (optional, default to 0)
     * @param owner Filter results by author (user id)  (optional)
     * @param scope Set the scope for the results. 1: self, 2: team, 3: everything. It defaults to the user value stored in preferences.  (optional)
     * @param order Change the ordering of the results.  (optional)
     * @param sort Change the sorting of results: ascending or descending.  (optional)
     * @return ApiResponse&lt;List&lt;Experiment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Experiment>> readExperimentsWithHttpInfo(String q, String extended, Integer related, String relatedOrigin, Integer cat, List<String> tags, Integer limit, Integer offset, Integer owner, Integer scope, String order, String sort) throws ApiException {
        com.squareup.okhttp.Call call = readExperimentsValidateBeforeCall(q, extended, related, relatedOrigin, cat, tags, limit, offset, owner, scope, order, sort, null, null);
        Type localVarReturnType = new TypeToken<List<Experiment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read all experiments that are accessible (asynchronously)
     * 
     * @param q Search for a term in title, body or elabid.  (optional)
     * @param extended Extended search (advanced query).  (optional)
     * @param related Look only for entries linked to this item id.  (optional)
     * @param relatedOrigin When using the \&quot;related\&quot; query parameter, select the type of the related ID (experiments or items)  (optional)
     * @param cat The status id of the experiments.  (optional)
     * @param tags An array of tags for filtering results containing all of these tags.  (optional)
     * @param limit Limit the number of results.  (optional, default to 15)
     * @param offset Skip a number of results. Use with limit to work the pagination.  (optional, default to 0)
     * @param owner Filter results by author (user id)  (optional)
     * @param scope Set the scope for the results. 1: self, 2: team, 3: everything. It defaults to the user value stored in preferences.  (optional)
     * @param order Change the ordering of the results.  (optional)
     * @param sort Change the sorting of results: ascending or descending.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readExperimentsAsync(String q, String extended, Integer related, String relatedOrigin, Integer cat, List<String> tags, Integer limit, Integer offset, Integer owner, Integer scope, String order, String sort, final ApiCallback<List<Experiment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readExperimentsValidateBeforeCall(q, extended, related, relatedOrigin, cat, tags, limit, offset, owner, scope, order, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Experiment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
